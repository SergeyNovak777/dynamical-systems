function two_FHN_jac(u, p, t)
    x1, y1, x2, y2, z = u
    ϵ, a, α, g, σ, k, k1, k2 = p

    ρz = k1 + k2 * z ^2

    # f1 derivative
    ϕ2 = rad2deg(atan(y2, x2))
    exp_ϕ2 = exp( k * ( cosd( σ / 2.0 ) - cosd( ϕ2 - α - σ / 2.0 ) ) )
    I_ϕ2_x2 = -( g * k * y2 * exp_ϕ2 * sind( ϕ2 - α - σ / 2.0 )) / ( ( 1.0 + exp_ϕ2 )^ 2 * ( 1.0 + ( y2 / x2 ) ^ 2 ) * x2 ^2 )
    I_ϕ2_y2 = ( g * k * exp_ϕ2 * sind( ϕ2 - α - σ / 2.0 ) ) / ( ( 1.0 + exp_ϕ2 )^ 2 * ( 1.0 + ( y2 / x2 ) ^ 2 ) * x2 )

    f1x1 = (1.0 - x1 ^ 2 - ρz) / ϵ
    f1y1 = -1.0 / ϵ
    f1x2 = (I_ϕ2_x2 + ρz) / ϵ
    f1y2 = I_ϕ2_y2 / ϵ
    f1z = (2 * k2 * z * ( x2 -x1 )) / ϵ
    # -----------------------------------------------

    # f2 derivative
    f2x1 = 1.0; f2y1 = 0.0; f2x2 = 0.0; f2y2 = 0.0; f2z = 0.0;
    # -----------------------------------------------

    # f3 derivative

    ϕ1 = rad2deg(atan(y1, x1))
    exp_ϕ1 = exp( k * ( cosd( σ / 2.0 ) - cosd( ϕ1 - α - σ / 2.0 ) ) )
    I_ϕ1_x1 = -( g * k * y1 * exp_ϕ1 * sind( ϕ1 - α - σ / 2.0 )) / ( ( 1.0 + exp_ϕ1 )^ 2 * ( 1.0 + ( y1 / x1 ) ^ 2 ) * x1 ^2 )
    I_ϕ1_y1 = ( g * k * exp_ϕ1 * sind( ϕ1 - α - σ / 2.0 ) ) / ( ( 1.0 + exp_ϕ1 )^ 2 * ( 1.0 + ( y1 / x1 ) ^ 2 ) * x1 )

    f3x1 = (I_ϕ1_x1 + ρz) / ϵ
    f3y1 = I_ϕ1_y1 / ϵ
    f3x2 = (1.0 - x2 ^ 2 - ρz) / ϵ
    f3y2  = -1.0 / ϵ
    f3z = (2 * k2 * z * ( x1 - x2 )) / ϵ
    # -----------------------------------------------

    # f4 derivative
    f4x1 = 0.0; f4y1 = 0.0; f4x2 = 1.0; f4y2 = 0.0; f4z = 0.0
    # -----------------------------------------------

    #f5 derivative
    f5x1 = 1.0; f5y1 = 0.0; f5x2 = -1.0; f5y2 = 0.0; f5z = 0.0;
    # -----------------------------------------------

    return SMatrix{5,5}(f1x1, f2x1, f3x1, f4x1, f5x1,
    f1y1, f2y1, f3y1, f4y1, f5y1,
    f1x2, f2x2, f3x2, f4x2, f5x2,
    f1y2, f2y2, f3y2, f4y2, f5y2,
    f1z, f2z, f3z, f4z, f5z)
end